name: Create Post from Issue

on:
  issues:
    types: [opened, labeled]

jobs:
  create-post:
    if: |
      contains(github.event.issue.labels.*.name, 'post') ||
      startsWith(github.event.issue.title, '[Note]') ||
      startsWith(github.event.issue.title, '[Article]') ||
      startsWith(github.event.issue.title, '[Response]') ||
      startsWith(github.event.issue.title, '[Bookmark]') ||
      startsWith(github.event.issue.title, '[Media]') ||
      startsWith(github.event.issue.title, '[Review]')
    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write
      discussions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Parse issue and create post
        id: parse-issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body;
            const labels = issue.labels.map(l => l.name);
            const title = issue.title;

            // Determine post type from labels first, then fall back to title prefix
            let postType = 'note';
            if (labels.includes('article')) {
              postType = 'article';
            } else if (labels.includes('response')) {
              postType = 'response';
            } else if (labels.includes('bookmark')) {
              postType = 'bookmark';
            } else if (labels.includes('media')) {
              postType = 'media';
            } else if (labels.includes('review')) {
              postType = 'review';
            } else if (labels.includes('note')) {
              postType = 'note';
            } else {
              // Fallback: detect from title prefix if labels are missing
              if (title.startsWith('[Article]')) {
                postType = 'article';
              } else if (title.startsWith('[Response]')) {
                postType = 'response';
              } else if (title.startsWith('[Bookmark]')) {
                postType = 'bookmark';
              } else if (title.startsWith('[Media]')) {
                postType = 'media';
              } else if (title.startsWith('[Review]')) {
                postType = 'review';
              } else if (title.startsWith('[Note]')) {
                postType = 'note';
              }
            }

            core.setOutput('postType', postType);

            // Parse form fields
            const fields = {};
            const fieldRegex = /### (.+?)\s*\n\s*(.+?)(?=\n###|\n$)/gs;
            let match;

            while ((match = fieldRegex.exec(body)) !== null) {
              const key = match[1].trim().toLowerCase().replace(/\s+/g, '_');
              const value = match[2].trim();
              if (value && value !== '_No response_' && value !== 'no') {
                fields[key] = value;
              }
            }

            core.setOutput('fields', JSON.stringify(fields));

            // Generate filename
            const date = new Date().toISOString().split('T')[0];
            
            // Use custom slug if provided, otherwise generate from title
            let slug;
            if (fields.custom_slug) {
              // Sanitize custom slug
              slug = fields.custom_slug
                .toLowerCase()
                .replace(/[^a-z0-9]+/g, '-')
                .replace(/^-|-$/g, '')
                .substring(0, 50);
            } else {
              // Generate slug from title
              slug = (fields.post_title || fields.title || issue.title)
                .toLowerCase()
                .replace(/[^a-z0-9]+/g, '-')
                .replace(/^-|-$/g, '')
                .substring(0, 50);
            }
            
            const filename = `${date}-${slug}.md`;

            core.setOutput('filename', filename);
            core.setOutput('date', date);

      - name: Load site configuration
        id: load-config
        run: |
          # Parse site.config.yml and extract discussions settings with error handling
          node -e "
            try {
              const yaml = require('js-yaml');
              const fs = require('fs');
              const config = yaml.load(fs.readFileSync('./site.config.yml', 'utf8'));
              const enabled = (config?.features?.discussions?.enabled) || false;
              const autoCreate = (config?.features?.discussions?.autoCreate) || false;
              console.log(\`discussions_enabled=\${enabled}\`);
              console.log(\`discussions_auto_create=\${autoCreate}\`);
            } catch (error) {
              console.error('Error reading config:', error.message);
              console.log('discussions_enabled=false');
              console.log('discussions_auto_create=false');
            }
          " >> $GITHUB_OUTPUT

      - name: Create GitHub Discussion
        if: steps.load-config.outputs.discussions_enabled == 'true' && steps.load-config.outputs.discussions_auto_create == 'true' && github.event.action == 'opened'
        id: create-discussion
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const postType = '${{ steps.parse-issue.outputs.postType }}';
            const fields = JSON.parse('${{ steps.parse-issue.outputs.fields }}');
            const postTitle = fields.title || fields.post_title || issue.title.replace(/^\[.*\] /, '');
            
            // Get the repository's discussion categories
            const query = `
              query($owner: String!, $repo: String!) {
                repository(owner: $owner, name: $repo) {
                  discussionCategories(first: 10) {
                    nodes {
                      id
                      name
                    }
                  }
                }
              }
            `;
            
            const result = await github.graphql(query, {
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Find the "Comments" category, fallback to "General", or use the first available
            const categories = result.repository.discussionCategories.nodes;
            const category = categories.find(cat => cat.name === 'Comments') 
              || categories.find(cat => cat.name === 'General') 
              || categories[0];
            
            if (!category) {
              console.log('No discussion categories found. Skipping discussion creation.');
              return;
            }
            
            // Create the discussion
            const mutation = `
              mutation($repositoryId: ID!, $categoryId: ID!, $title: String!, $body: String!) {
                createDiscussion(input: {
                  repositoryId: $repositoryId,
                  categoryId: $categoryId,
                  title: $title,
                  body: $body
                }) {
                  discussion {
                    id
                    url
                  }
                }
              }
            `;
            
            // Get repository ID
            const repoQuery = `
              query($owner: String!, $repo: String!) {
                repository(owner: $owner, name: $repo) {
                  id
                }
              }
            `;
            
            const repoResult = await github.graphql(repoQuery, {
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const discussionTitle = `ðŸ’¬ ${postTitle}`;
            const discussionBody = `This discussion is for comments on the ${postType}: **${postTitle}**\n\nCreated from issue #${issue.number}`;
            
            try {
              const createResult = await github.graphql(mutation, {
                repositoryId: repoResult.repository.id,
                categoryId: category.id,
                title: discussionTitle,
                body: discussionBody
              });
              
              const discussionUrl = createResult.createDiscussion.discussion.url;
              console.log(`Created discussion: ${discussionUrl}`);
              core.setOutput('discussion_url', discussionUrl);
            } catch (error) {
              console.error(`Error creating discussion for post "${postTitle}" (issue #${issue.number}):`, error.message);
              if (error.errors) {
                console.error('GraphQL errors:', JSON.stringify(error.errors, null, 2));
              }
              console.log(`Post will be created without discussion link - you can manually create a discussion and add it to the post later`);
            }

      - name: Create post file
        env:
          POST_TYPE: ${{ steps.parse-issue.outputs.postType }}
          FILENAME: ${{ steps.parse-issue.outputs.filename }}
          FIELDS: ${{ steps.parse-issue.outputs.fields }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          DATE: ${{ steps.parse-issue.outputs.date }}
          DISCUSSION_URL: ${{ steps.create-discussion.outputs.discussion_url }}
        run: |
          # Parse fields
          TITLE=$(echo "$FIELDS" | jq -r '.post_title // .title // ""')
          CONTENT=$(echo "$FIELDS" | jq -r '.content // ""')
          DESCRIPTION=$(echo "$FIELDS" | jq -r '.description // ""')
          TAGS=$(echo "$FIELDS" | jq -r '.tags // ""')
          AUTHOR=$(echo "$FIELDS" | jq -r '.author // ""')
          CANONICAL_URL=$(echo "$FIELDS" | jq -r '.canonical_url // ""')

          # If no title in fields, use issue title (remove [Type] prefix)
          if [ -z "$TITLE" ]; then
            TITLE=$(echo "$ISSUE_TITLE" | sed 's/^\[.*\] //')
          fi

          # Create directory if it doesn't exist
          mkdir -p "_${POST_TYPE}s"

          # Create frontmatter
          cat > "_${POST_TYPE}s/$FILENAME" <<EOF
          ---
          layout: $POST_TYPE
          title: "$TITLE"
          date: $DATE
          EOF

          # Add optional fields
          [ -n "$DESCRIPTION" ] && echo "description: \"$DESCRIPTION\"" >> "_${POST_TYPE}s/$FILENAME"
          [ -n "$AUTHOR" ] && echo "author: \"$AUTHOR\"" >> "_${POST_TYPE}s/$FILENAME"
          [ -n "$CANONICAL_URL" ] && echo "canonical_url: \"$CANONICAL_URL\"" >> "_${POST_TYPE}s/$FILENAME"

          # Add tags
          if [ -n "$TAGS" ]; then
            echo "tags:" >> "_${POST_TYPE}s/$FILENAME"
            IFS=',' read -ra TAG_ARRAY <<< "$TAGS"
            for tag in "${TAG_ARRAY[@]}"; do
              tag=$(echo "$tag" | xargs)
              echo "  - $tag" >> "_${POST_TYPE}s/$FILENAME"
            done
          fi

          # Add issue reference
          echo "issue: $ISSUE_NUMBER" >> "_${POST_TYPE}s/$FILENAME"

          # Add discussion URL if available
          [ -n "$DISCUSSION_URL" ] && echo "discussionUrl: \"$DISCUSSION_URL\"" >> "_${POST_TYPE}s/$FILENAME"

          # Close frontmatter
          echo "---" >> "_${POST_TYPE}s/$FILENAME"
          echo "" >> "_${POST_TYPE}s/$FILENAME"

          # Add content
          echo "$CONTENT" >> "_${POST_TYPE}s/$FILENAME"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add new ${{ steps.parse-issue.outputs.postType }}: ${{ github.event.issue.title }}"
          title: "New ${{ steps.parse-issue.outputs.postType }}: ${{ github.event.issue.title }}"
          body: |
            This PR was automatically created from issue #${{ github.event.issue.number }}.

            Post type: **${{ steps.parse-issue.outputs.postType }}**
            Created: ${{ steps.parse-issue.outputs.date }}

            Closes #${{ github.event.issue.number }}
          branch: "post/issue-${{ github.event.issue.number }}"
          labels: "automated-post"

      - name: Comment on issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'âœ… Your post has been created! A pull request will be opened shortly. Once merged, your post will be published.'
            });
